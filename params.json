{
  "name": "Nozzle",
  "tagline": "A toolset for principled web services with Spray",
  "body": "# Nozzle\r\n\r\nNozzle is a set of of opinionated - but customisable - tools to rapidly develop Spray-based web services. It's geared towards JSON-based WEB-apis.\r\n\r\nIt provides (each component optional, and customisable):\r\n* an _error/success model_ for web services that hides the http semantics from the business logic,\r\n* a _controller monad_ for error management and early return in business logic,\r\n* _serialisation_ helpers,\r\n* Spray _bootstrap helpers_ and _logging wrappers_ (for easier management of Akka's logging output),\r\n* Spray _routing helpers_ for concise and readable routers,\r\n* logging and _configuration_ facilities,\r\n* a minimalistic, optional _module system_.\r\n\r\n# Show me\r\n\r\nHere's the bootstrap function for an example app that leverages all the features of the toolkit:\r\n\r\n```scala\r\nobject Example extends App {\r\n  implicit val logging = nozzle.logging.BasicLogging()\r\n\r\n  implicit val globalExecutionContext: ExecutionContext =\r\n    ExecutionContext.global\r\n\r\n  import nozzle.config._\r\n  implicit val configProvider =\r\n      ConfigProvider.empty\r\n        .add(CampingControllerConfig(\"Le Marze\"))\r\n\r\n  val campingController = new CampingControllerImpl\r\n  val campingRouter = new CampingRouterImpl(campingController)\r\n\r\n  val server = Server(\r\n    \"test\",\r\n    ServerConfig(\"0.0.0.0\", 8085),\r\n    { implicit actorRefFactory =>\r\n      campingRouter.route\r\n    })\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}